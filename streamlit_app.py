# -*- coding: utf-8 -*-
"""Streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DQPjEMeMxooOwMcwC17qghfmESJSQKf9
"""

import streamlit as st
import os
import numpy as np
import cv2
from PIL import Image
import pydicom
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
import tensorflow as tf
from tensorflow.keras.layers import Lambda
from keras.models import load_model

# Dummy function to replace the Lambda logic
def dummy_cast(x):
    return tf.cast(x, tf.float32)

custom_objects = {
    "Cast": dummy_cast,
    "swish": tf.nn.swish,
    "relu6": tf.nn.relu6  # Add more if you had other functions
}

@st.cache_resource
def load_models():
    return {
        "MobileNet": load_model(
            os.path.join(MODEL_DIR, "mobilenet_best.h5"),
            custom_objects=custom_objects,
            compile=False
        ),
        "DenseNet": load_model(
            os.path.join(MODEL_DIR, "densenet_best.h5"),
            custom_objects=custom_objects,
            compile=False
        ),
        "CheXNet": load_model(
            os.path.join(MODEL_DIR, "chexnet_model(1).h5"),
            custom_objects=custom_objects,
            compile=False
        )
    }

def preprocess_image_cv2(img_np):
    if len(img_np.shape) == 2:
        img_np = cv2.cvtColor(img_np, cv2.COLOR_GRAY2RGB)
    img_resized = cv2.resize(img_np, (224, 224))
    img_array = img_to_array(img_resized) / 255.0
    return np.expand_dims(img_array, axis=0)

def read_dicom(file):
    ds = pydicom.dcmread(file)
    img = ds.pixel_array
    img = cv2.normalize(img, None, 0, 255, cv2.NORM_MINMAX)
    return img.astype(np.uint8)

def predict_class(model, img_array):
    preds = model.predict(img_array)
    class_idx = np.argmax(preds)
    confidence = float(np.max(preds))
    label = "Pneumonia" if class_idx == 1 else "Normal"
    return label, confidence

st.set_page_config(page_title="Pneumonia Detection", layout="centered")
st.title("ü´Å Pneumonia Detection App")

uploaded_file = st.file_uploader("Upload a Chest X-ray (JPG, PNG, or DICOM)", type=["png", "jpg", "jpeg", "dcm"])
model_choice = st.selectbox("Select Classification Model", ["MobileNet", "DenseNet", "CheXNet"])

if uploaded_file:
    file_ext = uploaded_file.name.split('.')[-1].lower()
    if file_ext == "dcm":
        image_np = read_dicom(uploaded_file)
        display_image = Image.fromarray(image_np)
    else:
        display_image = Image.open(uploaded_file).convert("RGB")
        image_np = np.array(display_image)

    st.image(display_image, caption="Uploaded Image", use_column_width=True)

    st.subheader("üîç Classification Result")
    img_array = preprocess_image_cv2(image_np)
    models = load_models()
    label, confidence = predict_class(models[model_choice], img_array)
    st.success(f"Prediction: **{label}** with confidence **{confidence:.2f}**")

    st.subheader("üìç Sample Object Detection Output")
    if os.path.exists(DEMO_IMAGE_PATH):
        st.image(DEMO_IMAGE_PATH, caption="Detected Pneumonia Area (Sample)", use_column_width=True)
    else:
        st.warning("Detection preview image not found.")